{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Manala Let your project's plumbing up to date. Get started Contribute","title":"Introduction"},{"location":"contributing/","text":"Build \ud83d\udd17 Requirements Go 1.14+ Update modules 1 2 go get -u ./... go mod tidy Documentation \ud83d\udd17 With Docker: 1 make run","title":"Contributing"},{"location":"contributing/#build","text":"Requirements Go 1.14+ Update modules 1 2 go get -u ./... go mod tidy","title":"Build"},{"location":"contributing/#documentation","text":"With Docker: 1 make run","title":"Documentation"},{"location":"installation/","text":"homebrew tap: 1 brew install manala/tap/manala snapcraft: 1 sudo snap install manala deb/rpm: Download the .deb or .rpm from the releases page and install with dpkg -i and rpm -i respectively. Shell script: 1 curl -sfL https://raw.githubusercontent.com/manala/manala/master/godownloader.sh | sh","title":"Installation"},{"location":"overview/","text":"A basic example in order to get the big picture \ud83d\udd17 Roughly said, manala allows you to embed distributed templates in your projects and ease the synchronization of your projects when the reference templates are updated. In this usage example, we are going to implement a very basic feature, yet rich enough to measure the benefits of manala and to fully understand the basic concepts behind it. The scenario of our example \ud83d\udd17 All your company's projects use PHP-CS-fixer in order to define your coding rules and apply them. Your company would like to always apply the same coding rules on all of its projects, but maintaining the same set of rules in every project can be tedious and error-prone. In an idealistic world, the coding rules should be maintained in one place and passed on to all your projects as seamlessly as possible. That's where manala enters the game ... Some wording: project vs recipe vs repository \ud83d\udd17 In manala's vocabulary, your projects (the company's PHP projects in our example) are called ... projects . In our example, our reference coding rules will be stored in a single place where they will be maintained. A recipe is a set of templates (the file containing your coding rules is one of these templates). All the recipes and templates you maintain are made accessible to your colleagues through a repository . First step: install manala \ud83d\udd17 1 curl -sL https://github.com/nervo/manala/raw/master/install.sh | sudo sh Tip Run manala in a console/terminal to obtain a list of available commands. Tip Various installation methods exist. Go to the installation documentation to learn more. Create your recipe repository and your first template \ud83d\udd17 Tip manala ships with some recipes by default. Run manala list to get the list of available recipes. But in this example, we are going to create our own recipe repository to better understand how manala works under the hood and enable you to develop your own recipes and templates when the need arises. Run the following command to create your recipe repository: mkdir ~/my-manala-recipe-repository Within this repository, we are going to create a set of templates that will host our PHP rule template: mkdir mkdir ~/my-manala-recipe-repository/my-php-templates Note In manala's philosophy, a repository is viewed as a company-wide repository where you can store recipes and templates for various purposes and many profiles: devops, hosting, backend developers, frontend developers, etc. In fact, your projects will not embed all the company's recipes but just the subset of recipes that are useful for your project. In our example, we are going to embed only the templates under my-php-templates in our PHP projects. Let's create a .manala.yaml file under the my-php-templates : 1 2 cd ~/my-manala-recipe-repository/my-php-templates touch ./.manala.yaml Note the .manala.yaml acts as a manifest for your recipe. It holds the name of your recipe and indicates which files or folders must be put under synchronization. Now edit this file and put the following content: 1 2 3 4 manala : description : My company's PHP recipe sync : - .manala Now we are going to create the .manala folder where all our PHP templates will be hosted: 1 mkdir ./.manala And finally, our PHP rule template: 1 touch ./.manala/php-cs-rules.php And paste the following content: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 <?php $header = <<<' EOF ' This file is part of the XXX project. Copyright \u00a9 My Company @author My Company <contact@my-company.com> EOF ; return [ '@Symfony' => true , 'psr0' => false , 'phpdoc_summary' => false , 'phpdoc_annotation_without_dot' => false , 'phpdoc_order' => true , 'array_syntax' => [ 'syntax' => 'short' ], 'ordered_imports' => true , 'simplified_null_return' => false , 'header_comment' => [ 'header' => $header ], 'yoda_style' => null , 'native_function_invocation' => [ 'include' => [ '@compiler_optimized' ]], 'no_superfluous_phpdoc_tags' => true , ]; Embed our templates in a PHP project \ud83d\udd17 Create a PHP project \ud83d\udd17 For the sake of our example, we are going to create a blank PHP project, but you can of course skip this step if you already have a current PHP project that uses PHP-CS-fixer . 1 2 3 4 5 6 7 8 mkdir ~/my-php-project cd ~/my-php-project mkdir ./src # Let's create a PHP file to give some food to PHP-CS-fixer echo \"<?php\\n echo \\\"Coucou\\\";\\n\" > ./src/hello.php composer init composer require friendsofphp/php-cs-fixer touch ./.php_cs.dist Add the following content in ./php_cs.dist : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 <?php $header = <<<' EOF ' This file is part of the My-wonderful-project project. Copyright \u00a9 My company @author My company <contact@my-company.com> EOF ; $finder = PhpCsFixer\\Finder :: create () -> in ([ // App __DIR__ . '/src' , ]) ; return PhpCsFixer\\Config :: create () -> setUsingCache ( true ) -> setRiskyAllowed ( true ) -> setFinder ( $finder ) -> setRules ([ '@Symfony' => true , 'psr0' => false , 'phpdoc_summary' => false , 'phpdoc_annotation_without_dot' => false , 'phpdoc_order' => true , 'array_syntax' => [ 'syntax' => 'short' ], 'ordered_imports' => true , 'simplified_null_return' => false , 'header_comment' => [ 'header' => $header ], 'yoda_style' => null , 'native_function_invocation' => [ 'include' => [ '@compiler_optimized' ]], 'no_superfluous_phpdoc_tags' => true , ]) ; Note For the moment, we have hard-coded our coding rules but in the next step, we will of course replace them with our shared rules. Run vendor/bin/php-cs-fixer fix --dry-run to check that your PHP-CS-fix config is OK. Embed our PHP templates in our PHP project \ud83d\udd17 Create a .manala.yaml at the root of your PHP project: touch ./.manala.yaml And add the following content: 1 2 3 manala : repository : /path/to/your/home/my-manala-recipe-repository template : my-php-templates Warning Update /path/to/your/home/ to match your real home !!! Using ~ won't work !!! And finally run the following command: 1 2 3 manala up # More verbose: # manala up --debug This command should have created a .manala folder at the root of your project, including a php-cs-rules.php file. And use our shared PHP rules \ud83d\udd17 Replace the content of the .php_cs.dist file with the following code, in order to include the rules that are defined from now on in .manala/php-cs-rules.php : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 <?php $finder = PhpCsFixer\\Finder :: create () -> in ([ // App __DIR__ . '/src' , ]) ; return PhpCsFixer\\Config :: create () -> setUsingCache ( true ) -> setRiskyAllowed ( true ) -> setFinder ( $finder ) -> setRules ( include ( '.manala/php-cs-rules.php' )) ; Run vendor/bin/php-cs-fixer fix --dry-run to test that everything is OK ! And finally run vendor/bin/php-cs-fixer fix to apply the coding rules. That's done ! But, hey, just wait a minute ! What about the header of my coding rules ? My shared coding rules mention a hard-coded project name ( This file is part of the XXX project ), and I want this part to be dynamic, depending on the current project ! Defining dynamic parts in your templates \ud83d\udd17 In this chapter, we are going to define some dynamic parts in our templates and implement them in the projects embedding our recipe. For this, we must first update our template to include some dynamic parts. Rename the php-cs-rules.php to add a tmpl suffix: 1 mv ~/my-manala-recipe-repository/my-php-templates/php-cs-rules.php ~/my-manala-recipe-repository/my-php-templates/php-cs-rules.php.tmpl And update its content: 1 2 - This file is part of the XXX project. + This file is part of the {{ .Vars.project_name }} project. Tip Templates must be written according to Golang template syntax , plus some sugar functions brought by Sprig . Now edit the .manala.yaml file in your PHP project to add the following line: 1 project_name : My - awesome - project Run the manala up command and look at the changes: 1 2 manala up cat ./.manala/php-cs-rules.php Warning Don't forget to run manala up each time you edit the .manala.yaml file !!! Share your templates with your colleagues \ud83d\udd17 As previously stated, recipes are meant to be distributed. Github is of course the right place to host your recipes! So, push your recipe to Github and don't forget to update your manala configuration ( .manala.yaml ) in the projects that consume your recipe: 1 2 3 4 5 6 manala: - repository: /path/to/your/home/my-manala-recipe-repository # Public repository + repository: https://github.com/my-company/manala-recipes.git # Private repository + repository: git@github.com:my-company/my-manala-recipe-repository.git From now on, each time you push updates to your Github repository, simply run manala up in your projects to pass on the last updates.","title":"Overview"},{"location":"overview/#a-basic-example-in-order-to-get-the-big-picture","text":"Roughly said, manala allows you to embed distributed templates in your projects and ease the synchronization of your projects when the reference templates are updated. In this usage example, we are going to implement a very basic feature, yet rich enough to measure the benefits of manala and to fully understand the basic concepts behind it.","title":"A basic example in order to get the big picture"},{"location":"overview/#the-scenario-of-our-example","text":"All your company's projects use PHP-CS-fixer in order to define your coding rules and apply them. Your company would like to always apply the same coding rules on all of its projects, but maintaining the same set of rules in every project can be tedious and error-prone. In an idealistic world, the coding rules should be maintained in one place and passed on to all your projects as seamlessly as possible. That's where manala enters the game ...","title":"The scenario of our example"},{"location":"overview/#some-wording-project-vs-recipe-vs-repository","text":"In manala's vocabulary, your projects (the company's PHP projects in our example) are called ... projects . In our example, our reference coding rules will be stored in a single place where they will be maintained. A recipe is a set of templates (the file containing your coding rules is one of these templates). All the recipes and templates you maintain are made accessible to your colleagues through a repository .","title":"Some wording: project vs recipe vs repository"},{"location":"overview/#first-step-install-manala","text":"1 curl -sL https://github.com/nervo/manala/raw/master/install.sh | sudo sh Tip Run manala in a console/terminal to obtain a list of available commands. Tip Various installation methods exist. Go to the installation documentation to learn more.","title":"First step: install manala"},{"location":"overview/#create-your-recipe-repository-and-your-first-template","text":"Tip manala ships with some recipes by default. Run manala list to get the list of available recipes. But in this example, we are going to create our own recipe repository to better understand how manala works under the hood and enable you to develop your own recipes and templates when the need arises. Run the following command to create your recipe repository: mkdir ~/my-manala-recipe-repository Within this repository, we are going to create a set of templates that will host our PHP rule template: mkdir mkdir ~/my-manala-recipe-repository/my-php-templates Note In manala's philosophy, a repository is viewed as a company-wide repository where you can store recipes and templates for various purposes and many profiles: devops, hosting, backend developers, frontend developers, etc. In fact, your projects will not embed all the company's recipes but just the subset of recipes that are useful for your project. In our example, we are going to embed only the templates under my-php-templates in our PHP projects. Let's create a .manala.yaml file under the my-php-templates : 1 2 cd ~/my-manala-recipe-repository/my-php-templates touch ./.manala.yaml Note the .manala.yaml acts as a manifest for your recipe. It holds the name of your recipe and indicates which files or folders must be put under synchronization. Now edit this file and put the following content: 1 2 3 4 manala : description : My company's PHP recipe sync : - .manala Now we are going to create the .manala folder where all our PHP templates will be hosted: 1 mkdir ./.manala And finally, our PHP rule template: 1 touch ./.manala/php-cs-rules.php And paste the following content: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 <?php $header = <<<' EOF ' This file is part of the XXX project. Copyright \u00a9 My Company @author My Company <contact@my-company.com> EOF ; return [ '@Symfony' => true , 'psr0' => false , 'phpdoc_summary' => false , 'phpdoc_annotation_without_dot' => false , 'phpdoc_order' => true , 'array_syntax' => [ 'syntax' => 'short' ], 'ordered_imports' => true , 'simplified_null_return' => false , 'header_comment' => [ 'header' => $header ], 'yoda_style' => null , 'native_function_invocation' => [ 'include' => [ '@compiler_optimized' ]], 'no_superfluous_phpdoc_tags' => true , ];","title":"Create your recipe repository and your first template"},{"location":"overview/#embed-our-templates-in-a-php-project","text":"","title":"Embed our templates in a PHP project"},{"location":"overview/#create-a-php-project","text":"For the sake of our example, we are going to create a blank PHP project, but you can of course skip this step if you already have a current PHP project that uses PHP-CS-fixer . 1 2 3 4 5 6 7 8 mkdir ~/my-php-project cd ~/my-php-project mkdir ./src # Let's create a PHP file to give some food to PHP-CS-fixer echo \"<?php\\n echo \\\"Coucou\\\";\\n\" > ./src/hello.php composer init composer require friendsofphp/php-cs-fixer touch ./.php_cs.dist Add the following content in ./php_cs.dist : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 <?php $header = <<<' EOF ' This file is part of the My-wonderful-project project. Copyright \u00a9 My company @author My company <contact@my-company.com> EOF ; $finder = PhpCsFixer\\Finder :: create () -> in ([ // App __DIR__ . '/src' , ]) ; return PhpCsFixer\\Config :: create () -> setUsingCache ( true ) -> setRiskyAllowed ( true ) -> setFinder ( $finder ) -> setRules ([ '@Symfony' => true , 'psr0' => false , 'phpdoc_summary' => false , 'phpdoc_annotation_without_dot' => false , 'phpdoc_order' => true , 'array_syntax' => [ 'syntax' => 'short' ], 'ordered_imports' => true , 'simplified_null_return' => false , 'header_comment' => [ 'header' => $header ], 'yoda_style' => null , 'native_function_invocation' => [ 'include' => [ '@compiler_optimized' ]], 'no_superfluous_phpdoc_tags' => true , ]) ; Note For the moment, we have hard-coded our coding rules but in the next step, we will of course replace them with our shared rules. Run vendor/bin/php-cs-fixer fix --dry-run to check that your PHP-CS-fix config is OK.","title":"Create a PHP project"},{"location":"overview/#embed-our-php-templates-in-our-php-project","text":"Create a .manala.yaml at the root of your PHP project: touch ./.manala.yaml And add the following content: 1 2 3 manala : repository : /path/to/your/home/my-manala-recipe-repository template : my-php-templates Warning Update /path/to/your/home/ to match your real home !!! Using ~ won't work !!! And finally run the following command: 1 2 3 manala up # More verbose: # manala up --debug This command should have created a .manala folder at the root of your project, including a php-cs-rules.php file.","title":"Embed our PHP templates in our PHP project"},{"location":"overview/#and-use-our-shared-php-rules","text":"Replace the content of the .php_cs.dist file with the following code, in order to include the rules that are defined from now on in .manala/php-cs-rules.php : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 <?php $finder = PhpCsFixer\\Finder :: create () -> in ([ // App __DIR__ . '/src' , ]) ; return PhpCsFixer\\Config :: create () -> setUsingCache ( true ) -> setRiskyAllowed ( true ) -> setFinder ( $finder ) -> setRules ( include ( '.manala/php-cs-rules.php' )) ; Run vendor/bin/php-cs-fixer fix --dry-run to test that everything is OK ! And finally run vendor/bin/php-cs-fixer fix to apply the coding rules. That's done ! But, hey, just wait a minute ! What about the header of my coding rules ? My shared coding rules mention a hard-coded project name ( This file is part of the XXX project ), and I want this part to be dynamic, depending on the current project !","title":"And use our shared PHP rules"},{"location":"overview/#defining-dynamic-parts-in-your-templates","text":"In this chapter, we are going to define some dynamic parts in our templates and implement them in the projects embedding our recipe. For this, we must first update our template to include some dynamic parts. Rename the php-cs-rules.php to add a tmpl suffix: 1 mv ~/my-manala-recipe-repository/my-php-templates/php-cs-rules.php ~/my-manala-recipe-repository/my-php-templates/php-cs-rules.php.tmpl And update its content: 1 2 - This file is part of the XXX project. + This file is part of the {{ .Vars.project_name }} project. Tip Templates must be written according to Golang template syntax , plus some sugar functions brought by Sprig . Now edit the .manala.yaml file in your PHP project to add the following line: 1 project_name : My - awesome - project Run the manala up command and look at the changes: 1 2 manala up cat ./.manala/php-cs-rules.php Warning Don't forget to run manala up each time you edit the .manala.yaml file !!!","title":"Defining dynamic parts in your templates"},{"location":"overview/#share-your-templates-with-your-colleagues","text":"As previously stated, recipes are meant to be distributed. Github is of course the right place to host your recipes! So, push your recipe to Github and don't forget to update your manala configuration ( .manala.yaml ) in the projects that consume your recipe: 1 2 3 4 5 6 manala: - repository: /path/to/your/home/my-manala-recipe-repository # Public repository + repository: https://github.com/my-company/manala-recipes.git # Private repository + repository: git@github.com:my-company/my-manala-recipe-repository.git From now on, each time you push updates to your Github repository, simply run manala up in your projects to pass on the last updates.","title":"Share your templates with your colleagues"},{"location":"usage/","text":"Project \ud83d\udd17 Repository \ud83d\udd17 Recipe \ud83d\udd17 Config \ud83d\udd17 A recipe config file is made of two parts: a describing manifest (description, files to sync,...) handled by a fixed manala map key some custom variables serving two purposes: provide default values scaffold validation schema 1 2 3 4 5 6 7 8 9 10 # Manifest manala : description : Saucerful of secrets # Mandatory description sync : - .manala # \".manala\" path will be synchronized on project # Custom variables foo : bar # Provide default value for \"foo\" bar : # Scaffold \"bar\" validation schema as an object baz : [] # Scaffold \"bar.baz\" validation schema as an array Validation \ud83d\udd17 As seen before, a validation schema is scaffolded from custom variables provided in recipe config file, using JSON Schema . 1 2 3 4 foo : bar : [] baz : 123 qux : {} generate: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 { \"type\" : \"object\" , \"additionalProperties\" : false , \"properties\" : { \"foo\" : { \"type\" : \"object\" , \"additionalProperties\" : false , \"properties\" : { \"bar\" : { \"type\" : \"array\" } } }, \"baz\" : {}, \"qux\" : { \"type\" : \"object\" , \"additionalProperties\" : true , \"properties\" : {} } } } Note additionalProperties default value depends on the number of the relating object properties. An empty object (zero properties) will lead to a default true , meaning that all properties are left to the discretion of the end user. Conversely, one or more properties will lead to a default false . Warning Only objects and arrays are auto scaffolded Custom validation schema could be provided using doc annotation 1 2 3 4 5 6 foo : bar : [] # @schema {\"enum\": [null, 123, \"foo\"]} baz : 123 # @schema {\"additionalProperties\": false} qux : {} 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 { \"type\" : \"object\" , \"additionalProperties\" : false , \"properties\" : { \"foo\" : { \"type\" : \"object\" , \"additionalProperties\" : false , \"properties\" : { \"bar\" : { \"type\" : \"array\" } } }, \"baz\" : { \"enum\" : [ null , 123 , \"foo\" ] }, \"qux\" : { \"type\" : \"object\" , \"additionalProperties\" : false , \"properties\" : {} } } } Some custom formats are also provided for the win: go-repo file-path domain Options \ud83d\udd17 Recipe options could be provided using doc annotation. They will be prompted to user during a project initialization. 1 2 3 4 5 bar : baz : [] # @schema {\"enum\": [null, 123, \"foo\"]} # @option {\"label\": \"Qux value\"} qux : 123 Options fields type are guessed by schema details. For instance, an enum will generate a drop down select, and a string type will generate a text input. In case of an enum , choices ares available from left to right, first one will be default. Content \ud83d\udd17 Recipes support three kind of files: Regular Template Functions are supplied by the built-in Go text/template package and the Sprig template function library . Additionally, following functions are provided: * toYaml : serialize variables as yaml Dist","title":"Usage"},{"location":"usage/#project","text":"","title":"Project"},{"location":"usage/#repository","text":"","title":"Repository"},{"location":"usage/#recipe","text":"","title":"Recipe"},{"location":"usage/#config","text":"A recipe config file is made of two parts: a describing manifest (description, files to sync,...) handled by a fixed manala map key some custom variables serving two purposes: provide default values scaffold validation schema 1 2 3 4 5 6 7 8 9 10 # Manifest manala : description : Saucerful of secrets # Mandatory description sync : - .manala # \".manala\" path will be synchronized on project # Custom variables foo : bar # Provide default value for \"foo\" bar : # Scaffold \"bar\" validation schema as an object baz : [] # Scaffold \"bar.baz\" validation schema as an array","title":"Config"},{"location":"usage/#validation","text":"As seen before, a validation schema is scaffolded from custom variables provided in recipe config file, using JSON Schema . 1 2 3 4 foo : bar : [] baz : 123 qux : {} generate: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 { \"type\" : \"object\" , \"additionalProperties\" : false , \"properties\" : { \"foo\" : { \"type\" : \"object\" , \"additionalProperties\" : false , \"properties\" : { \"bar\" : { \"type\" : \"array\" } } }, \"baz\" : {}, \"qux\" : { \"type\" : \"object\" , \"additionalProperties\" : true , \"properties\" : {} } } } Note additionalProperties default value depends on the number of the relating object properties. An empty object (zero properties) will lead to a default true , meaning that all properties are left to the discretion of the end user. Conversely, one or more properties will lead to a default false . Warning Only objects and arrays are auto scaffolded Custom validation schema could be provided using doc annotation 1 2 3 4 5 6 foo : bar : [] # @schema {\"enum\": [null, 123, \"foo\"]} baz : 123 # @schema {\"additionalProperties\": false} qux : {} 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 { \"type\" : \"object\" , \"additionalProperties\" : false , \"properties\" : { \"foo\" : { \"type\" : \"object\" , \"additionalProperties\" : false , \"properties\" : { \"bar\" : { \"type\" : \"array\" } } }, \"baz\" : { \"enum\" : [ null , 123 , \"foo\" ] }, \"qux\" : { \"type\" : \"object\" , \"additionalProperties\" : false , \"properties\" : {} } } } Some custom formats are also provided for the win: go-repo file-path domain","title":"Validation"},{"location":"usage/#options","text":"Recipe options could be provided using doc annotation. They will be prompted to user during a project initialization. 1 2 3 4 5 bar : baz : [] # @schema {\"enum\": [null, 123, \"foo\"]} # @option {\"label\": \"Qux value\"} qux : 123 Options fields type are guessed by schema details. For instance, an enum will generate a drop down select, and a string type will generate a text input. In case of an enum , choices ares available from left to right, first one will be default.","title":"Options"},{"location":"usage/#content","text":"Recipes support three kind of files: Regular Template Functions are supplied by the built-in Go text/template package and the Sprig template function library . Additionally, following functions are provided: * toYaml : serialize variables as yaml Dist","title":"Content"},{"location":"commands/manala/","text":"manala \ud83d\udd17 Let your project's plumbing up to date Synopsis \ud83d\udd17 Manala synchronize some boring parts of your projects, such as makefile targets, virtualization and provisioning files... Recipes are pulled from a git repository, or a local directory. Options \ud83d\udd17 1 2 3 -c, --cache-dir string cache directory (default \"/Users/florian.rey/Library/Caches\") -d, --debug debug mode (default true) -h, --help help for manala SEE ALSO \ud83d\udd17 manala init - Init project manala list - List recipes manala update - Update project manala watch - Watch project","title":"manala"},{"location":"commands/manala/#manala","text":"Let your project's plumbing up to date","title":"manala"},{"location":"commands/manala/#synopsis","text":"Manala synchronize some boring parts of your projects, such as makefile targets, virtualization and provisioning files... Recipes are pulled from a git repository, or a local directory.","title":"Synopsis"},{"location":"commands/manala/#options","text":"1 2 3 -c, --cache-dir string cache directory (default \"/Users/florian.rey/Library/Caches\") -d, --debug debug mode (default true) -h, --help help for manala","title":"Options"},{"location":"commands/manala/#see-also","text":"manala init - Init project manala list - List recipes manala update - Update project manala watch - Watch project","title":"SEE ALSO"},{"location":"commands/manala_init/","text":"manala init \ud83d\udd17 Init project Synopsis \ud83d\udd17 Init (manala init) will init a project. Example: manala init -> resulting in a project init in a directory (default to the current directory) 1 manala init [ dir ] [ flags ] Options \ud83d\udd17 1 2 3 -h, --help help for init -i, --recipe string use recipe -o, --repository string use repository Options inherited from parent commands \ud83d\udd17 1 2 -c, --cache-dir string cache directory (default \"/Users/florian.rey/Library/Caches\") -d, --debug debug mode (default true) SEE ALSO \ud83d\udd17 manala - Let your project's plumbing up to date","title":"manala init"},{"location":"commands/manala_init/#manala-init","text":"Init project","title":"manala init"},{"location":"commands/manala_init/#synopsis","text":"Init (manala init) will init a project. Example: manala init -> resulting in a project init in a directory (default to the current directory) 1 manala init [ dir ] [ flags ]","title":"Synopsis"},{"location":"commands/manala_init/#options","text":"1 2 3 -h, --help help for init -i, --recipe string use recipe -o, --repository string use repository","title":"Options"},{"location":"commands/manala_init/#options-inherited-from-parent-commands","text":"1 2 -c, --cache-dir string cache directory (default \"/Users/florian.rey/Library/Caches\") -d, --debug debug mode (default true)","title":"Options inherited from parent commands"},{"location":"commands/manala_init/#see-also","text":"manala - Let your project's plumbing up to date","title":"SEE ALSO"},{"location":"commands/manala_list/","text":"manala list \ud83d\udd17 List recipes Synopsis \ud83d\udd17 List (manala list) will list recipes available on repository. Example: manala list -> resulting in a recipes list display 1 manala list [ flags ] Options \ud83d\udd17 1 2 -h, --help help for list -o, --repository string use repository Options inherited from parent commands \ud83d\udd17 1 2 -c, --cache-dir string cache directory (default \"/Users/florian.rey/Library/Caches\") -d, --debug debug mode (default true) SEE ALSO \ud83d\udd17 manala - Let your project's plumbing up to date","title":"manala list"},{"location":"commands/manala_list/#manala-list","text":"List recipes","title":"manala list"},{"location":"commands/manala_list/#synopsis","text":"List (manala list) will list recipes available on repository. Example: manala list -> resulting in a recipes list display 1 manala list [ flags ]","title":"Synopsis"},{"location":"commands/manala_list/#options","text":"1 2 -h, --help help for list -o, --repository string use repository","title":"Options"},{"location":"commands/manala_list/#options-inherited-from-parent-commands","text":"1 2 -c, --cache-dir string cache directory (default \"/Users/florian.rey/Library/Caches\") -d, --debug debug mode (default true)","title":"Options inherited from parent commands"},{"location":"commands/manala_list/#see-also","text":"manala - Let your project's plumbing up to date","title":"SEE ALSO"},{"location":"commands/manala_update/","text":"manala update \ud83d\udd17 Update project Synopsis \ud83d\udd17 Update (manala update) will update project, based on recipe and related variables defined in manala.yaml. Example: manala update -> resulting in an update in a directory (default to the current directory) 1 manala update [ dir ] [ flags ] Options \ud83d\udd17 1 2 3 4 -h, --help help for update -i, --recipe string force recipe -r, --recursive recursive -o, --repository string force repository Options inherited from parent commands \ud83d\udd17 1 2 -c, --cache-dir string cache directory (default \"/Users/florian.rey/Library/Caches\") -d, --debug debug mode (default true) SEE ALSO \ud83d\udd17 manala - Let your project's plumbing up to date","title":"manala update"},{"location":"commands/manala_update/#manala-update","text":"Update project","title":"manala update"},{"location":"commands/manala_update/#synopsis","text":"Update (manala update) will update project, based on recipe and related variables defined in manala.yaml. Example: manala update -> resulting in an update in a directory (default to the current directory) 1 manala update [ dir ] [ flags ]","title":"Synopsis"},{"location":"commands/manala_update/#options","text":"1 2 3 4 -h, --help help for update -i, --recipe string force recipe -r, --recursive recursive -o, --repository string force repository","title":"Options"},{"location":"commands/manala_update/#options-inherited-from-parent-commands","text":"1 2 -c, --cache-dir string cache directory (default \"/Users/florian.rey/Library/Caches\") -d, --debug debug mode (default true)","title":"Options inherited from parent commands"},{"location":"commands/manala_update/#see-also","text":"manala - Let your project's plumbing up to date","title":"SEE ALSO"},{"location":"commands/manala_watch/","text":"manala watch \ud83d\udd17 Watch project Synopsis \ud83d\udd17 Watch (manala watch) will watch project, and launch update on changes. Example: manala watch -> resulting in a watch in a directory (default to the current directory) 1 manala watch [ dir ] [ flags ] Options \ud83d\udd17 1 2 3 4 5 -a, --all watch recipe too -h, --help help for watch -n, --notify use system notifications -i, --recipe string force recipe -o, --repository string force repository Options inherited from parent commands \ud83d\udd17 1 2 -c, --cache-dir string cache directory (default \"/Users/florian.rey/Library/Caches\") -d, --debug debug mode (default true) SEE ALSO \ud83d\udd17 manala - Let your project's plumbing up to date","title":"manala watch"},{"location":"commands/manala_watch/#manala-watch","text":"Watch project","title":"manala watch"},{"location":"commands/manala_watch/#synopsis","text":"Watch (manala watch) will watch project, and launch update on changes. Example: manala watch -> resulting in a watch in a directory (default to the current directory) 1 manala watch [ dir ] [ flags ]","title":"Synopsis"},{"location":"commands/manala_watch/#options","text":"1 2 3 4 5 -a, --all watch recipe too -h, --help help for watch -n, --notify use system notifications -i, --recipe string force recipe -o, --repository string force repository","title":"Options"},{"location":"commands/manala_watch/#options-inherited-from-parent-commands","text":"1 2 -c, --cache-dir string cache directory (default \"/Users/florian.rey/Library/Caches\") -d, --debug debug mode (default true)","title":"Options inherited from parent commands"},{"location":"commands/manala_watch/#see-also","text":"manala - Let your project's plumbing up to date","title":"SEE ALSO"}]}